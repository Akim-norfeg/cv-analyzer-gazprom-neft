import streamlit as st
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from huggingface_hub import login
import torch
import numpy as np
import os
import io
import logging
import matplotlib.pyplot as plt
import seaborn as sns

from utils.cv_reader import read_resume_from_file, preprocess_text
from utils.github_reader import extract_github_links_from_text, collect_github_text
from utils.constants import competency_list, profession_matrix, profession_names

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="AI –†–µ–∑—é–º–µ –ê–Ω–∞–ª–∏–∑", layout="wide")

# üìò –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
os.makedirs("logs", exist_ok=True)
logging.basicConfig(filename="logs/errors.log", level=logging.ERROR,
                    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s")

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    login(token=st.secrets["HUGGINGFACE_TOKEN"])
    repo_id = "KsyLight/resume-ai-competency-model"
    tokenizer = AutoTokenizer.from_pretrained(repo_id, use_auth_token=True)
    model = AutoModelForSequenceClassification.from_pretrained(repo_id, use_auth_token=True)
    model.eval()
    return tokenizer, model

tokenizer, model = load_model()

# ü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
def predict_competencies(text):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)
    with torch.no_grad():
        outputs = model(**inputs)
    probs = torch.sigmoid(outputs.logits).squeeze().cpu().numpy()
    binary_preds = (probs > 0.5).astype(int)
    return binary_preds, probs

# üìÇ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üíº AI –ê–Ω–∞–ª–∏–∑ –†–µ–∑—é–º–µ –∏ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π")
uploaded_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ (PDF, DOCX, TXT)", type=["pdf", "docx", "txt"])

if uploaded_file:
    try:
        file_bytes = uploaded_file.read()
        file_buffer = io.BytesIO(file_bytes)

        with st.spinner("‚è≥ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞..."):
            text = read_resume_from_file(uploaded_file.name, file_buffer)
            if not text or not isinstance(text, str):
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.")
                st.stop()

        # GitHub
        gh_links = extract_github_links_from_text(text)
        gh_text = ""
        if gh_links:
            st.markdown("üîó <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã GitHub-—Å—Å—ã–ª–∫–∏:</b>", unsafe_allow_html=True)
            for link in gh_links:
                st.markdown(f"- [{link}]({link})")
                try:
                    gh_text += " " + preprocess_text(collect_github_text(link))
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {link}")
                    logging.error(f"GitHub error: {e}")

        full_text = preprocess_text(text + " " + gh_text)

        with st.spinner("ü§ñ –ê–Ω–∞–ª–∏–∑..."):
            pred_vector, prob_vector = predict_competencies(full_text)

        # üß† –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
        st.subheader("üß† –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:")
        for i, prob in enumerate(prob_vector):
            if pred_vector[i] == 1:
                st.markdown(f"- ‚úÖ {competency_list[i]} ‚Äî **{prob:.2f}**")

        # üìä –ì—Ä–µ–π–¥—ã
        st.markdown("---")
        st.subheader("üìà –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:")
        user_grades = []
        for i, comp in enumerate(competency_list):
            default = 1 if pred_vector[i] == 1 else 0
            grade = st.radio(comp, [0, 1, 2, 3], index=default, horizontal=True, key=f"grade_{i}")
            user_grades.append(grade)

        user_vector = np.array(user_grades)

        # üß© –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
        st.markdown("---")
        st.subheader("üëî –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º:")
        results = []
        for i, prof in enumerate(profession_names):
            prof_req = profession_matrix[:, i]
            matched = np.sum((user_vector >= prof_req) & (prof_req > 0))
            total = np.sum(prof_req > 0)
            percent = (matched / total) * 100 if total > 0 else 0
            st.write(f"üîπ **{prof}** ‚Äî {percent:.1f}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")
            results.append(percent)

        # üé® –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        st.markdown("### üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        fig, ax = plt.subplots(figsize=(6, 1.5))
        sns.heatmap([results], annot=True, fmt=".1f", cmap="YlGnBu", xticklabels=profession_names, yticklabels=["%"])
        st.pyplot(fig)

        # üîÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.markdown("---")
        st.subheader("üîÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        st.info("–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é.")

        # üìÉ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        with st.expander("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ"):
            st.text(full_text)

    except Exception as e:
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        logging.error(f"Critical error: {e}")